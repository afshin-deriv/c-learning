// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proto/v1/clearning.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LearningService_GetLesson_FullMethodName    = "/clearning.LearningService/GetLesson"
	LearningService_ValidateCode_FullMethodName = "/clearning.LearningService/ValidateCode"
	LearningService_GetProgress_FullMethodName  = "/clearning.LearningService/GetProgress"
)

// LearningServiceClient is the client API for LearningService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LearningServiceClient interface {
	// Get lesson details
	GetLesson(ctx context.Context, in *LessonRequest, opts ...grpc.CallOption) (*LessonResponse, error)
	// Validate user's code submission
	ValidateCode(ctx context.Context, in *CodeSubmission, opts ...grpc.CallOption) (*ValidationResponse, error)
	// Get user's progress
	GetProgress(ctx context.Context, in *ProgressRequest, opts ...grpc.CallOption) (*ProgressResponse, error)
}

type learningServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLearningServiceClient(cc grpc.ClientConnInterface) LearningServiceClient {
	return &learningServiceClient{cc}
}

func (c *learningServiceClient) GetLesson(ctx context.Context, in *LessonRequest, opts ...grpc.CallOption) (*LessonResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LessonResponse)
	err := c.cc.Invoke(ctx, LearningService_GetLesson_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningServiceClient) ValidateCode(ctx context.Context, in *CodeSubmission, opts ...grpc.CallOption) (*ValidationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ValidationResponse)
	err := c.cc.Invoke(ctx, LearningService_ValidateCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *learningServiceClient) GetProgress(ctx context.Context, in *ProgressRequest, opts ...grpc.CallOption) (*ProgressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProgressResponse)
	err := c.cc.Invoke(ctx, LearningService_GetProgress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LearningServiceServer is the server API for LearningService service.
// All implementations must embed UnimplementedLearningServiceServer
// for forward compatibility.
type LearningServiceServer interface {
	// Get lesson details
	GetLesson(context.Context, *LessonRequest) (*LessonResponse, error)
	// Validate user's code submission
	ValidateCode(context.Context, *CodeSubmission) (*ValidationResponse, error)
	// Get user's progress
	GetProgress(context.Context, *ProgressRequest) (*ProgressResponse, error)
	mustEmbedUnimplementedLearningServiceServer()
}

// UnimplementedLearningServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLearningServiceServer struct{}

func (UnimplementedLearningServiceServer) GetLesson(context.Context, *LessonRequest) (*LessonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLesson not implemented")
}
func (UnimplementedLearningServiceServer) ValidateCode(context.Context, *CodeSubmission) (*ValidationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateCode not implemented")
}
func (UnimplementedLearningServiceServer) GetProgress(context.Context, *ProgressRequest) (*ProgressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProgress not implemented")
}
func (UnimplementedLearningServiceServer) mustEmbedUnimplementedLearningServiceServer() {}
func (UnimplementedLearningServiceServer) testEmbeddedByValue()                         {}

// UnsafeLearningServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LearningServiceServer will
// result in compilation errors.
type UnsafeLearningServiceServer interface {
	mustEmbedUnimplementedLearningServiceServer()
}

func RegisterLearningServiceServer(s grpc.ServiceRegistrar, srv LearningServiceServer) {
	// If the following call pancis, it indicates UnimplementedLearningServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LearningService_ServiceDesc, srv)
}

func _LearningService_GetLesson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LessonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningServiceServer).GetLesson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LearningService_GetLesson_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningServiceServer).GetLesson(ctx, req.(*LessonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningService_ValidateCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CodeSubmission)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningServiceServer).ValidateCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LearningService_ValidateCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningServiceServer).ValidateCode(ctx, req.(*CodeSubmission))
	}
	return interceptor(ctx, in, info, handler)
}

func _LearningService_GetProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LearningServiceServer).GetProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LearningService_GetProgress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LearningServiceServer).GetProgress(ctx, req.(*ProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LearningService_ServiceDesc is the grpc.ServiceDesc for LearningService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LearningService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "clearning.LearningService",
	HandlerType: (*LearningServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLesson",
			Handler:    _LearningService_GetLesson_Handler,
		},
		{
			MethodName: "ValidateCode",
			Handler:    _LearningService_ValidateCode_Handler,
		},
		{
			MethodName: "GetProgress",
			Handler:    _LearningService_GetProgress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/v1/clearning.proto",
}
